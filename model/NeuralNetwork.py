import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import matplotlib.pyplot as plt
import time

from model import DataProcessing


class NeuralNetwork:

    def __init__(self):
        self.loaded_model = tf.keras.models.load_model("static/funguide_saved_model.h5",
                                                       custom_objects={"KerasLayer": hub.KerasLayer})
        self.unique_genus = np.array(['Agaricus', 'Amanita', 'Boletus', 'Cortinarius', 'Entoloma', 'Hygrocybe',
                                      'Lactarius', 'Russula', 'Suillus'])

    def image_to_prediction(self, image):
        """Returns the predicted genus as a string and the location of the prediction graph generated by the model"""
        batch = DataProcessing.create_data_batch(image, test_data=True)
        prediction = self.loaded_model.predict(batch)
        graph_location = self.top_3_predictions_unlabeled(prediction)
        prediction_label = self.get_prediction_label(prediction)
        return prediction_label, graph_location

    def get_prediction_label(self, prediction_array):
        """
      Converts a prediction array into a label.
      """
        return self.unique_genus[np.argmax(prediction_array)]

    # View model's top 3 predictions for unlabeled data
    def top_3_predictions_unlabeled(self, prediction_array, n=0):
        """Returns the top 3 predicted mushroom genera, saves a bar chart as a png file, and returns the address
        of the generated graph as a string."""
        prediction_prob = prediction_array[n]

        top_3_predictions_indexes = prediction_prob.argsort()[-3:][::-1]
        top_3_prediction_values = prediction_prob[top_3_predictions_indexes]
        top_3_prediction_labels = self.unique_genus[top_3_predictions_indexes]

        # plot the predictions
        plt.bar(np.arange(len(top_3_prediction_labels)),
                top_3_prediction_values,
                color="gray")
        plt.title("Top 3 highest probability genus predictions")
        plt.ylabel("Confidence")
        plt.xticks(np.arange(len(top_3_prediction_labels)),
                   labels=top_3_prediction_labels)

        now = str(int(time.time()))
        url = "static/img/graphs/" + now + ".png"
        plt.savefig(url)
        return url


